g# Commit Convention

#

#

### 1. 커밋 구조

#

```
type : subject

body

footer
```

- body와 footer는 생략 가능

#

#

### 2. 커밋 유형

#

| 커밋 유형 | 의미                                                   |
| --------- | ------------------------------------------------------ |
| Feat      | 새로운 기능 추가                                       |
| Fix       | 버그 수정                                              |
| Docs      | 문서 수정                                              |
| Design    | 사용자 UI 디자인 변경 (CSS 등)                         |
| Style     | 코드 형식 수정 (세미콜론 누락 등, 코드 자체 변경 제외) |
| Refactor  | 코드 리팩토링 (코드 구조 재조정)                       |
| Comment   | 주석 추가 및 변경                                      |
| Rename    | 파일, 폴더 이름 변경                                   |
| Remove    | 파일, 폴더 삭제                                        |
| Test      | 테스트 코드, 리펙토링 테스트 코드 추가                 |
| Chore     | 빌드 업무 수정, 패키지 매니저 수정                     |

#

#

### 3. 커밋 형식

#

##### 3-1. 제목과 본문을 빈 행으로 분리

- 혹은 후술할 커밋 템플릿 이용

#

##### 3-2. '어떻게'보다는 '무엇'과 '왜'를 설명

#

##### 3-3. type과 subject는 대문자로 시작, 마지막에 마침표 추가 금지

#

##### 3-4. body는 '~다.'로 끝나는 문장형으로 기술

#

##### 3-5. footer는 해결한 이슈의 커밋 id나 참고한 커밋 id 작성

#

##### 3-6. 여러 항목 존재시 글머리 기호(-) 활용

#

#

### 4. 커밋 템플릿

- 프로젝트 최상단에 .gitmessage.txt 추가
- Gitbash에 프로젝트 최상단 경로에서 git config --global commit.template ./.gitmessage.txt 입력
- git commit 명령 실행 시 템플릿 출력 (vi 에디터)
  - i 입력하여 내용 수정
  - 수정 종료 시 esc 입력 후 :wq 입력하면 커밋 완료

#

#

### 5. 주의사항

#

##### 5-1. 한 커밋에는 한가지 문제만 작성
